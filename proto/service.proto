syntax = "proto3";

package mypackage;

import "google/protobuf/empty.proto";

message Error { string cause = 1; }

message Identify { string uri = 1; }

message Processor {
  /* The URI of the Processor. */
  string uri = 1;
  /* The processor configuration, in JSON-LD */
  string config = 2;
  /* Processor arguments, in JSON-LD */
  string arguments = 3;
}

// Tells the orchestrator that the processor is initialized
message ProcessorInit {
  /* The URI of the Processor. */
  string uri = 1;
  optional Error error = 2;
}

message Close { string channel = 1; }

message Message {
  string channel = 1;
  bytes data = 2;
}

message StreamMessage {
  Id id = 1;
  string channel = 2;
}

// All possible messages that runners handle
message RunnerMessage {
  oneof inner {
    Processor proc = 1;
    google.protobuf.Empty start = 2;
    Message msg = 3;
    Close close = 4;
    StreamMessage streamMsg = 5;
  }
}

message OrchestratorMessage {
  oneof inner {
    ProcessorInit init = 1;
    Message msg = 2;
    Close close = 3;
    Identify identify = 4;
    StreamMessage streamMsg = 5;
  }
}

message Id { uint64 id = 1; }

message DataChunk { bytes data = 1; }

message LogMessage {
  string level = 1;
  string msg = 2;
  repeated string entities = 3;
  repeated string aliases = 4;
}

service Runner {
  rpc connect(stream OrchestratorMessage) returns (stream RunnerMessage);
  rpc sendStreamMessage(stream DataChunk) returns (stream Id);
  rpc receiveStreamMessage(Id) returns (stream DataChunk);
  rpc logStream(stream LogMessage) returns (google.protobuf.Empty);
}
